import React, {useState, useRef, useEffect} from 'react'
import './App.css'
import {initShaderProgram, initBuffers, drawScene} from './utils'
import Slider from './Slider'

const App = () => {


    const [programState, setProgramState] = useState(null)
    const canvasRef = useRef(null)

    const hollowCube = {
        positions: [-0.8,0.8,1,-1,1,1,0.8,0.8,1,0.8,0.8,1,1,1,1,-1,1,1,0.8,0.8,1,1,1,1,0.8,-0.8,1,1,1,1,1,-1,1,0.8,-0.8,1,0.8,-0.8,1,1,-1,1,-0.8,-0.8,1,1,-1,1,-1,-1,1,-0.8,-0.8,1,-0.8,-0.8,1,-1,-1,1,-0.8,0.8,1,-1,-1,1,-1,1,1,-0.8,0.8,1,1,1,1,1,-1,1,1,1,-1,1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-0.4,0.4,-1,-1,1,-1,0.4,0.4,-1,0.4,0.4,-1,1,1,-1,-1,1,-1,0.4,0.4,-1,1,1,-1,0.4,-0.4,-1,1,1,-1,1,-1,-1,0.4,-0.4,-1,0.4,-0.4,-1,1,-1,-1,-0.4,-0.4,-1,1,-1,-1,-1,-1,-1,-0.4,-0.4,-1,-0.4,-0.4,-1,-1,-1,-1,-0.4,0.4,-1,-1,-1,-1,-1,1,-1,-0.4,0.4,-1,0.8,0.8,1,0.8,-0.8,1,0.4,0.4,-1,0.4,0.4,-1,0.4,-0.4,-1,0.8,-0.8,1,-0.8,0.8,1,-0.8,-0.8,1,-0.4,-0.4,-1,-0.4,-0.4,-1,-0.4,0.4,-1,-0.8,0.8,1,0.8,0.8,1,0.4,0.4,-1,-0.4,0.4,-1,-0.4,0.4,-1,-0.8,0.8,1,0.8,0.8,1,0.8,-0.8,1,0.4,-0.4,-1,-0.4,-0.4,-1,-0.4,-0.4,-1,-0.8,-0.8,1,0.8,-0.8,1],
        colors: [0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.5,0.2,0.3,1,0.6,0.4,0.3,1,0.6,0.4,0.3,1,0.6,0.4,0.3,1,0.6,0.4,0.3,1,0.6,0.4,0.3,1,0.6,0.4,0.3,1,0.7,0.3,0.3,1,0.7,0.3,0.3,1,0.7,0.3,0.3,1,0.7,0.3,0.3,1,0.7,0.3,0.3,1,0.7,0.3,0.3,1,0.8,0.2,0.2,1,0.8,0.2,0.2,1,0.8,0.2,0.2,1,0.8,0.2,0.2,1,0.8,0.2,0.2,1,0.8,0.2,0.2,1,0.8,0.1,0.3,1,0.8,0.1,0.3,1,0.8,0.1,0.3,1,0.8,0.1,0.3,1,0.8,0.1,0.3,1,0.8,0.1,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,0.9,0.5,0.3,1,1,0.1,0.5,1,1,0.1,0.5,1,1,0.1,0.5,1,1,0.1,0.5,1,1,0.1,0.5,1,1,0.1,0.5,1,0.9,1,0.4,1,0.9,1,0.4,1,0.9,1,0.4,1,0.9,1,0.4,1,0.9,1,0.4,1,0.9,1,0.4,1,0.65,0.32,0.412,1,0.65,0.32,0.412,1,0.65,0.32,0.412,1,0.65,0.32,0.412,1,0.65,0.32,0.412,1,0.65,0.32,0.412,1,0.45,0.12,0.22,1,0.45,0.12,0.22,1,0.45,0.12,0.22,1,0.45,0.12,0.22,1,0.45,0.12,0.22,1,0.45,0.12,0.22,1]
    }

    const tetrahedron = {
        positions: [
            -1, -1, -1,
            1, -1, -1,
            0, 0, 1,
            1, -1, -1,
            1, 1, -1,
            0, 0, 1,
            1, 1, -1,
            -1, 1, -1,
            0, 0, 1,
            -1, 1, -1,
            -1, -1, -1,
            0, 0, 1,
            1, -1, -1,
            -1, -1, -1,
            -1, 1, -1,
            1, 1, -1
        ],
        colors: [1.0,  1.0,  1.0,  1.0,1.0,  1.0,  1.0,  1.0,1.0,  1.0,  1.0,  1.0,1.0,  0.0,  0.0,  1.0,1.0,  0.0,  0.0,  1.0,1.0,  0.0,  0.0,  1.0,0.0,  1.0,  0.0,  1.0,0.0,  1.0,  0.0,  1.0,0.0,  1.0,  0.0,  1.0,0.0,  0.0,  1.0,  1.0,0.0,  0.0,  1.0,  1.0,0.0,  0.0,  1.0,  1.0,1.0,  1.0,  0.0,  1.0,1.0,  1.0,  0.0,  1.0,1.0,  1.0,  0.0,  1.0,1.0,  1.0,  0.0,  1.0]
    };

    const random = {
        positions: [    //atas
            -0.9, -0.9, -0.7,
            -0.7, -0.7, -0.7,
            0, 0.9, -0.7,
        
            -0.7, -0.7, -0.7,
            0, 0.7, -0.7,
            0, 0.9, -0.7,
        
            -0.9, -0.9, -0.7,
            0.9, -0.9, -0.7,
            0.7, -0.7, -0.7,
        
            -0.9, -0.9, -0.7,
            0.7, -0.7, -0.7,
            -0.7, -0.7, -0.7,
        
            0.9, -0.9, -0.7,
            0, 0.9, -0.7,
            0, 0.7, -0.7,
        
            0.9, -0.9, -0.7,
            0, 0.7, -0.7,
            0.7, -0.7, -0.7,
        
            //penampang luar
            -0.9, -0.9, -0.7,
            -0.9, -0.9, -0.9,
            0.9, -0.9, -0.9,
        
            -0.9, -0.9, -0.7,
            0.9, -0.9, -0.9,
            0.9, -0.9, -0.7,
        
            0.9, -0.9, -0.7,
            0.9, -0.9, -0.9,
            0, 0.9, -0.9,
        
            0.9, -0.9, -0.7,
            0, 0.9, -0.9,
            0, 0.9, -0.7,
        
            0, 0.9, -0.7,
            0, 0.9, -0.9,
            -0.9, -0.9, -0.9,
        
            0, 0.9, -0.7,
            -0.9, -0.9, -0.9,
            -0.9, -0.9, -0.7,
        
            //penampang dalam
            -0.7, -0.7, -0.9,
            -0.7, -0.7, -0.7,
            0.7, -0.7, -0.9,
        
            0.7, -0.7, -0.9,
            -0.7, -0.7, -0.7,
            0.7, -0.7, -0.7,
        
            0.7, -0.7, -0.9,
            0.7, -0.7, -0.7,
            0, 0.7, -0.9,
        
            0, 0.7, -0.9,
            0.7, -0.7, -0.7,
            0, 0.7, -0.7,
        
            0, 0.7, -0.9,
            0, 0.7, -0.7,
            -0.7, -0.7, -0.9,
        
            -0.7, -0.7, -0.9,
            0, 0.7, -0.7,
            -0.7, -0.7, -0.7,
        
            //bawah
            -0.7, -0.7, -0.9,
            -0.9, -0.9, -0.9,
            0, 0.9, -0.9,
            
            0, 0.7, -0.9,
            -0.7, -0.7, -0.9,
            0, 0.9, -0.9,
            
            0.9, -0.9, -0.9,
            -0.9, -0.9, -0.9,
            0.7, -0.7, -0.9,
            
            0.7, -0.7, -0.9,
            -0.9, -0.9, -0.9,
            -0.7, -0.7, -0.9,
            
            0, 0.9, -0.9,
            0.9, -0.9, -0.9,
            0, 0.7, -0.9,
            
            0, 0.7, -0.9,
            0.9, -0.9, -0.9,
            0.7, -0.7, -0.9],
        colors: [    1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
            1.0,  1.0,  1.0,  1.0,
        
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
        
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
        
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
        
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
            0.0,  1.0,  0.0,  1.0,
        
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
            0.0,  0.0,  1.0,  1.0,
        
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
            1.0,  1.0,  0.0,  1.0,
        
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0,
            1.0,  0.0,  0.0,  1.0]
    }

    //ganti model disini
    const [currentModel, changeModel] = useState(random);

    const [rotationAngle, setRotationAngle] = useState({
        x: 0.0,
        y: 0.0,
        z: 0.0
    });

    const [zoom, setZoom] = useState(-6.0);

    const [glAttr, setGlAttr] = useState(null);

    useEffect(() => {
        const canvas = canvasRef.current;
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');

        const shaderProgram = initShaderProgram(gl);
        
        const programInfo = {
            program: shaderProgram,
            attribLocations: {
                vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),
                vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor'),
            },
            uniformLocations: {
                projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
                modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),
            }
        };
    
        // Here's where we call the routine that builds all the
        // objects we'll be drawing.
        const buffers = initBuffers(gl, currentModel);

        setGlAttr({
            gl: gl,
            programInfo: programInfo,
            buffers: buffers
        });

        drawScene(gl, programInfo, buffers, currentModel.positions.length / 3, rotationAngle, zoom);
    }, []);

    const handleX = (angle) => {
        setRotationAngle({
            x: angle,
            y: rotationAngle.y,
            z: rotationAngle.z
        });
        drawScene(glAttr.gl, glAttr.programInfo, glAttr.buffers, currentModel.positions.length / 3, rotationAngle, zoom);
    };

    const handleY = (angle) => {
        setRotationAngle({
            x: rotationAngle.x,
            y: angle,
            z: rotationAngle.z
        });
        drawScene(glAttr.gl, glAttr.programInfo, glAttr.buffers, currentModel.positions.length / 3, rotationAngle, zoom);
    };

    const handleZ = (angle) => {
        setRotationAngle({
            x: rotationAngle.x,
            y: rotationAngle.y,
            z: angle
        });
        drawScene(glAttr.gl, glAttr.programInfo, glAttr.buffers, currentModel.positions.length / 3, rotationAngle, zoom);
    };

    const handleZoom = (coef) => {
        setZoom(-coef/10.0);
        drawScene(glAttr.gl, glAttr.programInfo, glAttr.buffers, currentModel.positions.length / 3, rotationAngle, zoom);
    }

    return (
        <div>
            <canvas ref={canvasRef} width="640" height="480"></canvas>
            <Slider min={0} max={360} value={0} onChange={handleX}/>
            <Slider min={0} max={360} value={0} onChange={handleY}/>
            <Slider min={0} max={360} value={0} onChange={handleZ}/>
            <Slider min={30} max={200} value={60} onChange={handleZoom}/>
        </div>
    )
}

export default App;
